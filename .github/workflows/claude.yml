name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && github.event.action == 'opened')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: write  # Changed from read to write for posting comments
      id-token: write
      actions: read # Required for Claude to read CI results on PRs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Pre-execution setup and validation
        id: pre-setup
        run: |
          # Issue情報を環境変数に設定
          echo "GITHUB_EVENT_ISSUE_NUMBER=${{ github.event.issue.number }}" >> $GITHUB_ENV
          echo "GITHUB_EVENT_ISSUE_TITLE=${{ github.event.issue.title }}" >> $GITHUB_ENV
          echo "GITHUB_EVENT_ISSUE_BODY<<EOF" >> $GITHUB_ENV
          echo "${{ github.event.issue.body }}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          # ラベル情報の処理
          LABELS="${{ join(github.event.issue.labels.*.name, ' ') }}"
          echo "GITHUB_EVENT_ISSUE_LABELS=$LABELS" >> $GITHUB_ENV
          
          # 前処理スクリプトの実行
          ./.github/scripts/claude-auto-execution.sh

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # This is an optional setting that allows Claude to read CI results on PRs
          additional_permissions: |
            actions: read
          
          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4.1)
          # model: "claude-opus-4-1-20250805"
          
          # Optional: Customize the trigger phrase (default: @claude)
          # trigger_phrase: "/claude"
          
          # Optional: Trigger when specific user is assigned to an issue
          # assignee_trigger: "claude-bot"
          
          # Optional: Allow Claude to run specific commands
          # allowed_tools: "Bash(npm install),Bash(npm run build),Bash(npm run test:*),Bash(npm run lint:*)"
          
          # Custom instructions for automatic issue processing
          custom_instructions: |
            以下の指針に従ってissueの内容を分析し、適切なコード実装を行ってください：
            
            1. **Issue分析**:
               - issueのタイトルと説明文を詳細に分析
               - 要件の明確化と技術的課題の特定
               - 実装すべき機能やバグ修正の範囲を把握
            
            2. **実装方針**:
               - 最小限の変更で要件を満たす実装を心がける
               - 既存のコード構造とスタイルに合わせる
               - セキュリティとパフォーマンスを考慮
               - 適切なエラーハンドリングを実装
            
            3. **品質保証**:
               - 実装した機能のテストコードを作成
               - ドキュメントの更新が必要な場合は併せて実施
               - コードレビューの観点で自己チェック
            
            4. **進捗報告**:
               - 実装内容の要約をissueコメントで報告
               - 技術的な判断や制約があれば説明
               - 追加で必要な作業があれば提案
          
          # Optional: Custom environment variables for Claude
          # claude_env: |
          #   NODE_ENV: test

      - name: Handle errors and notify
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = context.issue.number;
            const errorMessage = `
            ## ⚠️ Claude Code 実行エラー
            
            Issue #${issueNumber} の自動実装処理でエラーが発生しました。
            
            **エラー詳細**:
            - ワークフロー実行ID: ${{ github.run_id }}
            - 実行時刻: ${new Date().toISOString()}
            
            **対応方法**:
            1. [ワークフロー実行ログ](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})を確認
            2. エラーの原因を特定し、必要に応じて設定を修正
            3. \`@claude\` メンションで手動実行を試行
            
            **サポート**:
            エラーが継続する場合は、issue の詳細を確認し、手動での対応を検討してください。
            `;
            
            await github.rest.issues.createComment({
              issue_number: issueNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: errorMessage
            });

      - name: Success notification
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = context.issue.number;
            const successMessage = `
            ## ✅ Claude Code 自動実装完了
            
            Issue #${issueNumber} の内容を分析し、自動実装を完了しました。
            
            **実行情報**:
            - ワークフロー実行ID: ${{ github.run_id }}
            - 完了時刻: ${new Date().toISOString()}
            
            **確認事項**:
            - [実行ログ](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})で詳細を確認可能
            - 作成されたPRがある場合は内容を確認してください
            - 追加の修正が必要な場合は \`@claude\` でお声がけください
            `;
            
            await github.rest.issues.createComment({
              issue_number: issueNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: successMessage
            });

